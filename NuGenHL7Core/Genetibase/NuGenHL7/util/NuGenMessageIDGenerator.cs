using System;
namespace Genetibase.NuGenHL7.util
{
	
	/// <summary> Creates unique message IDs.  IDs are stored in a file called <hapi.home>/id_file for persistence
	/// across JVM sessions.  Note that if one day you run the JVM with a new working directory,
	/// you must move or copy id_file into this directory so that new ID numbers will begin
	/// with the last one used, rather than starting over again.
	/// </summary>
	/// <author>  Neal Acharya
	/// </author>
	public class NuGenMessageIDGenerator
	{
		/// <summary> Synchronized method used to return the single (static) instance of the class</summary>
		public static NuGenMessageIDGenerator Instance
		{
			get
			{
				lock (typeof(Genetibase.NuGenHL7.util.NuGenMessageIDGenerator))
				{
					if (messageIdGenerator == null)
						messageIdGenerator = new NuGenMessageIDGenerator();
					return messageIdGenerator;
				}
			}
			//end method
			
		}
		/// <summary> Synchronized method used to return the incremented id value</summary>
		virtual public System.String NewID
		{
			get
			{
				lock (this)
				{
					//increment the private field
					id = id + 1;
					//create an instance of the Filewriter Object pointing to "C:\\extfiles\\Idfile.txt"
					fileW = new System.IO.StreamWriter(idFile, false, System.Text.Encoding.Default);
					//write the id value to the file
					System.String idStr = System.Convert.ToString(id);
					fileW.Write(idStr);
					fileW.Flush();
					fileW.Close();
					return System.Convert.ToString(id);
				}
			}
			//end method
			
		}
		
		private static NuGenMessageIDGenerator messageIdGenerator;
		private long id;
		private System.IO.StreamWriter fileW;
		private static readonly System.String idFile;
		
		/// <summary> Constructor
		/// Creates an instance of the class
		/// Its reads an id (longint#) from an external file, if one is not present then the external file
		/// is created and initialized to zero.
		/// This id is stored into the private field of id.
		/// </summary>
		private NuGenMessageIDGenerator()
		{
			/*check external file for the last value unique id value generated by
			this class*/
			try
			{
				// We should check to see if the external file for storing the unique ids exists
				System.IO.FileInfo extFile = new System.IO.FileInfo(idFile);
				if (SupportClass.FileSupport.CreateNewFile(extFile) == true)
				{
					/*there was no existing file so a new one has been created with createNewFile method.  The
					file is stored at  <hapi.home>/id_file.txt */
					// We can simply initialize the private id field to zero
					id = 0;
				}
				//end if
				else
				{
					/*The file does exist which is why we received false from the
					createNewFile method. We should now try to read from this file*/
					System.IO.StreamReader fileR = new System.IO.StreamReader(idFile, System.Text.Encoding.Default);
					char[] charArray = new char[100];
					int e = fileR.Read((System.Char[]) charArray, 0, charArray.Length);
					if (e <= 0)
					{
						/*We know the file exists but it has no value stored in it. So at this point we can simply initialize the
						private id field to zero*/
						id = 0;
					}
					//end if
					else
					{
						/* Here we know that the file exists and has a stored value. we should read this value and set the
						private id field to it*/
						System.String idStr = new String(charArray);
						System.String idStrTrim = idStr.Trim();
						id = System.Int64.Parse(idStrTrim);
					} //end else
					//Fix for bug 1100881:  Close the file after writing.
					fileR.Close();
				} //end else
			}
			//end try
			catch (System.IO.FileNotFoundException e)
			{
				System.Console.Out.WriteLine(e);
			} //end catch
		} //end constructor code
		static NuGenMessageIDGenerator()
		{
			idFile = NuGenHome.getHomeDirectory().FullName + "/id_file";
		}
	}
}